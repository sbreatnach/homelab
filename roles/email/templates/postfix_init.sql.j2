CREATE TABLE IF NOT EXISTS virtual_domains (
 id serial NOT NULL,
 name varchar(50) NOT NULL,
 CONSTRAINT pk_virtual_domains PRIMARY KEY (id),
 CONSTRAINT uniq_virtual_domains_name UNIQUE (name)
 );

CREATE TABLE IF NOT EXISTS virtual_users (
  id serial NOT NULL,
  domain_id integer NOT NULL,
  email varchar(255) NOT NULL,
  password varchar(150) NOT NULL,
  quota bigint NOT NULL DEFAULT 0,
  CONSTRAINT pk_virtual_users PRIMARY KEY (id),
  CONSTRAINT uniq_virtual_users_email UNIQUE (email),
  CONSTRAINT fk_virtual_users_domain_id FOREIGN KEY (domain_id)
        REFERENCES virtual_domains(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS virtual_aliases (
   id serial NOT NULL,
   domain_id integer NOT NULL,
   source varchar(255) NOT NULL,
   destination varchar(255) NOT NULL,
   CONSTRAINT pk_virtual_aliases PRIMARY KEY (id),
   CONSTRAINT uniq_virtual_aliases_source UNIQUE (source),
   CONSTRAINT fk_virtual_aliases_domain_id FOREIGN KEY (domain_id)
        REFERENCES virtual_domains(id) ON DELETE CASCADE
);

INSERT INTO virtual_domains (name)
VALUES ('{{ domains.external }}')
ON CONFLICT (name) DO NOTHING;

{% for username, data in email.users.items() %}
INSERT INTO virtual_users (domain_id, password, email)
VALUES
(
    (SELECT id FROM virtual_domains WHERE name = '{{ domains.external }}'),
    '{{ data.password }}',
    '{{ username }}@{{ domains.external }}'
)
ON CONFLICT (email) DO UPDATE SET password = '{{ data.password }}';
{% endfor %}

{% for username, data in email.users.items() %}
{% for alias in data.aliases|default([]) %}
INSERT INTO virtual_aliases (domain_id, source, destination)
VALUES
(
    (SELECT id FROM virtual_domains WHERE name = '{{ domains.external }}'),
    '{{ alias }}@{{ domains.external }}',
    '{{ username }}@{{ domains.external }}'
)
ON CONFLICT (source) DO UPDATE SET destination = '{{ username }}@{{ domains.external }}';
{% endfor %}
{% endfor %}